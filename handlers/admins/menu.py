import matplotlib.pyplot as plt
from aiogram import F, Bot
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.types import Message, FSInputFile, CallbackQuery

from helpers.keyboards.markups_admin import menu, select_product, edit_product, show_orders_menu, security_menu, delete_admin
from helpers.keyboards.fabric_admin import AdminMenuCallBack, ChangeProductCallback, DeleteAdmin

from database.functions import get_products, CreateBook, Order, Users

from helpers.states import NewBook
from helpers.functions import edit_message, delete_and_send_message

from ..routers import admin_router

from datetime import datetime


@admin_router.message(Command(commands='admin'))
async def admin_panel(callback_query: CallbackQuery, bot: Bot):
    await bot.send_photo(callback_query.from_user.id, photo=FSInputFile(f'resources/menu/menu.png'), reply_markup=menu())

@admin_router.callback_query(AdminMenuCallBack.filter(F.action == 'back'))
async def back_main_menu(callback_query: CallbackQuery, bot: Bot):
    await callback_query.message.delete()
    await bot.send_photo(callback_query.from_user.id, photo=FSInputFile(f'resources/menu/menu.png'), reply_markup=menu())

@admin_router.callback_query(AdminMenuCallBack.filter(F.action == 'add_book'))
async def new_book(callback_query: CallbackQuery, bot: Bot, state: FSMContext):
    await state.set_state(NewBook.title)
    await bot.send_message(callback_query.from_user.id, '–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–Ω–∏–≥–∏ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã')

@admin_router.callback_query(AdminMenuCallBack.filter(F.action == 'edit_products'))
async def select_products(callback_query: CallbackQuery, bot: Bot):
    books_pool = await get_products()
    for book in books_pool:
        try:
            if book[9] is True:  # –ï—Å–ª–∏ –∫–Ω–∏–≥–∞ –±—É–º–∞–∂–Ω–∞—è
                await bot.send_photo(
                    callback_query.from_user.id,
                    photo=FSInputFile(f'resources/book_images/{book[0]}.png'),
                    caption=f'''
<b>{book[1]}</b> [id: {book[0]}]
{book[4]}

–ê–≤—Ç–æ—Ä: {book[5]}
–ñ–∞–Ω—Ä: {book[6]}
–ì–æ–¥ –∏–∑–¥–∞–Ω–∏—è: {book[7]}
<b>–ù–∞ —Å–∫–ª–∞–¥–µ: {book[10]} —à—Ç.</b>

–ë—É–º–∞–∂–Ω—ã–π –≤–∞—Ä–∏–Ω–∞—Ç
                            ''',
                reply_markup=select_product(book[0])
            )
            if book[9] is False:  # –ï—Å–ª–∏ –∫–Ω–∏–≥–∞ —Ü–∏—Ñ—Ä–æ–≤–∞—è
                await bot.send_photo(
                    callback_query.from_user.id,
                    photo=FSInputFile(f'resources/book_images/{book[0]}.png'),
                    caption=f'''
<b>{book[1]}</b> [id: {book[0]}]
{book[4]}

–ê–≤—Ç–æ—Ä: {book[5]}
–ñ–∞–Ω—Ä: {book[6]}
–ì–æ–¥ –∏–∑–¥–∞–Ω–∏—è: {book[7]}

–¶–∏—Ñ—Ä–æ–≤–æ–π –≤–∞—Ä–∏–Ω–∞—Ç
                ''',
                reply_markup=select_product(book[0])
            )
        except:
            await bot.send_message(callback_query.from_user.id, f'''
<b>{book[1]}</b> [id: {book[0]}]
{book[4]}

–ê–≤—Ç–æ—Ä: {book[5]}
–ñ–∞–Ω—Ä: {book[6]}
–ì–æ–¥ –∏–∑–¥–∞–Ω–∏—è: {book[7]}
–¶–∏—Ñ—Ä–æ–≤–∞—è {book[9]}
–ù–∞ —Å–∫–ª–∞–¥–µ: {book[10]} —à—Ç.
''', reply_markup=select_product(book[0]))
    await bot.answer_callback_query(callback_query.id)

@admin_router.callback_query(AdminMenuCallBack.filter(F.action == 'orders'))
async def show_orders(callback_query: CallbackQuery, bot: Bot):
    await delete_and_send_message(bot, callback_query, '–ü–∞–Ω–µ–ª—å –∑–∞–∫–∞–∑–æ–≤', show_orders_menu())

@admin_router.callback_query(AdminMenuCallBack.filter(F.action == 'stats'))
async def stats(callback_query: CallbackQuery, bot: Bot):
    import seaborn as sns
    import pandas as pd
    import numpy as np

    # –§–æ—Ä–º–∏—Ä—É–µ–º –¥–∞—Ç–∞—Å–µ—Ç
    sales_pool = await Order.all_orders()
    df = pd.DataFrame(data=sales_pool).drop([0, 1, 2, 3, 6, 7, 8], axis=1).rename({4: 'book',
                                                                                   5: 'price',
                                                                                   9: 'date',
                                                                                   10: 'status'},
                                                                                  axis=1)

    # –¢–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    await bot.send_message(callback_query.from_user.id, f'–û–±—â–∞—è –≤—ã—Ä—É—á–∫–∞: {sum([x[5] for x in sales_pool])} ‚ÇΩ'
                                                        f'\n–í—ã—Ä—É—á–∫–∞ –∑–∞ —Å–µ–≥–æ–¥–Ω—è: {sum([x[5] for x in sales_pool if x[9].day == datetime.utcnow().day])} ‚ÇΩ'
                                                        f'\n–í—ã—Ä—É—á–∫–∞ –∑–∞ –º–µ—Å—è—Ü: {sum([x[5] for x in sales_pool if x[9].month == datetime.utcnow().month])} ‚ÇΩ')
    await bot.send_message(callback_query.from_user.id, 'üí∞')



    ax = sns.scatterplot(data=df, x=df['date'].dt.month, y='price', c='red')
    # ax = sns.regplot(data=df, x=df['date'].dt.month, y='price')
    plt.grid(True)
    plt.xticks(np.arange(1, 13, step=1))
    fig = ax.get_figure()
    fig.savefig('BOB.png')

    await bot.answer_callback_query(callback_query.id)

@admin_router.callback_query(AdminMenuCallBack.filter(F.action == 'mailing'))
async def stats(callback_query: CallbackQuery, bot: Bot):
    print('mailing')
    await bot.answer_callback_query(callback_query.id)

@admin_router.callback_query(AdminMenuCallBack.filter(F.action == 'security'))
async def security_panel(callback_query: CallbackQuery, bot: Bot):
    await delete_and_send_message(bot, callback_query, '–ë–µ–∑–æ–ø–∞—Å–Ω–æ—Ç—å üîí', security_menu())

@admin_router.callback_query(AdminMenuCallBack.filter(F.action == 'show_admins'))
async def admins_list(callback_query: CallbackQuery, bot: Bot):
    admins = await Users.get_admins()
    for admin in admins:
        await callback_query.message.answer(f'''
@{admin[-1]}
id: {admin[-2]}
type: {admin[1]}
''', reply_markup=delete_admin(admin[-2]))
    await bot.answer_callback_query(callback_query.id)

@admin_router.callback_query(DeleteAdmin.filter(F.action == 'delete'))
async def delete_admin_menu(callback_query: CallbackQuery, callback_data: DeleteAdmin, bot: Bot):
    await Users.change_role_by_id(callback_data.id, 'user')
    await callback_query.answer(text=f'–†–∞–∑–∂–∞–ª–æ–≤–∞–Ω {callback_data.id}')
    print(f'[!] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{callback_query.from_user.username} —Ä–∞–∑–∂–∞–ª–æ–≤–∞–ª {callback_data.id} {datetime.now()}')

@admin_router.callback_query(AdminMenuCallBack.filter(F.action == 'change_password'))
async def change_password(callback_query: CallbackQuery, bot: Bot):
    print('cp')
    await bot.answer_callback_query(callback_query.id)

@admin_router.callback_query(AdminMenuCallBack.filter(F.action == 'settings'))
async def stats(callback_query: CallbackQuery, bot: Bot):
    print('settings')
    await bot.answer_callback_query(callback_query.id)